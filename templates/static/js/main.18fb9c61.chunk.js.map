{"version":3,"sources":["components/PlotHeader.js","components/PlotContainer.js","components/PlotExplanation.js","models/NodeModel.js","utils.js","algorithms/DepthFirstSearch.js","dataStructures/Queue.js","algorithms/BreadthFirstSearch.js","algorithms/BipartitenessAlgorithm.js","dataStructures/Stack.js","algorithms/TarjanStrongConnection.js","algorithms/ArticulationPointSearch.js","containers/AlgoVizContainer.js","containers/AppContainer.js","App.js","index.js"],"names":["PlotHeader","this","props","nodes","algorithms","selectedAlgorithm","exampleGraphs","selectedExampleGraph","running","startNodeId","setStartNodeId","onChangeGraph","onChangeAlgorithm","onClickRun","onClickClear","className","title","value","onChange","map","algo","key","Object","keys","node","id","cx","disabled","onClick","Component","PlotContainer","initialiseNodes","getDimensions","draw","svgElem","d3","select","x","clientWidth","y","clientHeight","self","selectAll","remove","defs","append","classed","done","on","event","defaultPrevented","coords","mouse","addNode","attr","components","forEach","drawComponent","bind","drawEdges","drawNode","n","component","svg","length","find","points","c","join","children","childId","child","markerId","visitedFrom","visited","drag","behavior","d","updateNodes","selected","draggedLine","x2","sourceEvent","offsetX","size","y2","offsetY","target","tagName","connectId","stopPropagation","parseInt","substring","filter","push","graphType","parents","articulationPoint","current","group","call","text","visitOrder","findIndex","v","PlotExplanation","explanation","line","Node","visitIndex","lowLink","childVisitCount","promiseSequence","tasks","Promise","resolve","task","then","promiseWhile","predicate","action","loop","directedTree","NodeModel","directedGraph","directedCycle","disconnectedComponents","notBiconnected","biconnected","biconnectedBipartite","notBipartite","bipartite","getExampleGraph","DepthFirstSearch","pause","stack","console","log","setState","_","assign","startNode","search","catch","e","message","reject","Error","currentNode","parentNode","updateState","delay","parent","updateComponent","markAsVisited","hasChildren","allChildrenVisited","moveToParent","moveToNextChild","pop","peek","unvisitedChildren","sortChildren","nextId","next","sort","a","b","reduce","prev","Queue","internal","isNotEmpty","shift","BreadthFirstSearch","queue","parentId","enqueue","edge","dequeue","enqueueUnvisitedChildren","BipartitenessAlgorithm","searches","concat","groupings","uniq","groupNode","parentGroups","sortedUniq","p","Stack","TarjanStrongConnection","searchNodes","childTasks","updatedChild","Math","min","onStack","otherNodeId","otherNode","ArticulationPointSearch","currentVisitIndex","unvisitedPoints","articulationPoints","ALGOS","BFS","DFS","TSC","APS","BA","AlgoVizContainer","context","state","algorithm","selectableAlgorithms","exampleGraph","currentId","searchAlgorithm","start","error","update","reset","preventDefault","resetNodes","runAlgorithm","clearNodes","selectableAlgos","headerProps","includes","containerProps","name","href","AppContainer","menuVisible","cssClass","test","navigator","userAgent","vendor","window","opera","skrollr","init","forceHeight","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18fb9c61.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cx from \"classnames\";\n\nimport \"./PlotHeader.css\";\n\nexport default class PlotHeader extends Component {\n\tstatic propTypes = {\n\t\ttitle: PropTypes.string,\n\t\tnodes: PropTypes.array.isRequired,\n\t\talgorithms: PropTypes.array.isRequired,\n\t\tselectedAlgorithm: PropTypes.string,\n\t\texampleGraphs: PropTypes.object.isRequired,\n\t\tselectedExampleGraph: PropTypes.string,\n\t\trunning: PropTypes.bool.isRequired,\n\t\tstartNodeId: PropTypes.number.isRequired,\n\t\tsetStartNodeId: PropTypes.func.isRequired,\n\t\tonChangeAlgorithm: PropTypes.func.isRequired,\n\t\tonChangeGraph: PropTypes.func.isRequired,\n\t\tonClickRun: PropTypes.func.isRequired,\n\t\tonClickClear: PropTypes.func.isRequired,\n\t};\n\n\trender() {\n\t\tlet {\n\t\t\t// title,\n\t\t\tnodes,\n\t\t\talgorithms,\n\t\t\tselectedAlgorithm,\n\t\t\texampleGraphs,\n\t\t\tselectedExampleGraph,\n\t\t\trunning,\n\t\t\tstartNodeId,\n\t\t\tsetStartNodeId,\n\t\t\tonChangeGraph,\n\t\t\tonChangeAlgorithm,\n\t\t\tonClickRun,\n\t\t\tonClickClear,\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<div className=\"PlotHeader\">\n\t\t\t\t<h1>{this.props.title || \"Breadth and Depth First Search\"}</h1>\n\t\t\t\t<form className=\"pure-form\">\n\t\t\t\t\t<label className=\"algorithm\">Algorithm</label>\n\t\t\t\t\t<select\n\t\t\t\t\t\tclassName=\"algorithm\"\n\t\t\t\t\t\tvalue={selectedAlgorithm}\n\t\t\t\t\t\tonChange={onChangeAlgorithm}\n\t\t\t\t\t>\n\t\t\t\t\t\t{algorithms.map((algo) => (\n\t\t\t\t\t\t\t<option value={algo} key={algo}>\n\t\t\t\t\t\t\t\t{algo}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t\t<label className=\"example-graph\">Example Graph</label>\n\t\t\t\t\t<select\n\t\t\t\t\t\tclassName=\"example-graph\"\n\t\t\t\t\t\tvalue={selectedExampleGraph}\n\t\t\t\t\t\tonChange={onChangeGraph}\n\t\t\t\t\t>\n\t\t\t\t\t\t{Object.keys(exampleGraphs).map((key) => (\n\t\t\t\t\t\t\t<option value={key} key={key}>\n\t\t\t\t\t\t\t\t{key}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t\t<label className=\"start-node\">Start Node</label>\n\t\t\t\t\t<select\n\t\t\t\t\t\tclassName=\"start-node\"\n\t\t\t\t\t\tvalue={startNodeId}\n\t\t\t\t\t\tonChange={setStartNodeId}\n\t\t\t\t\t>\n\t\t\t\t\t\t{nodes.map((node) => (\n\t\t\t\t\t\t\t<option value={node.id} key={node.id}>\n\t\t\t\t\t\t\t\t{node.id}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName={cx(\"pure-button\", {\n\t\t\t\t\t\t\tdisabled: running,\n\t\t\t\t\t\t\t\"button-primary\": !running,\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tonClick={onClickRun}\n\t\t\t\t\t>\n\t\t\t\t\t\t{running ? `Running ${selectedAlgorithm}` : \"Run\"}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName={cx(\"pure-button\", {\n\t\t\t\t\t\t\tdisabled: running,\n\t\t\t\t\t\t\t\"button-secondary\": !running,\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tonClick={onClickClear}\n\t\t\t\t\t>\n\t\t\t\t\t\tClear\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport d3 from \"d3\";\n\nimport \"./PlotContainer.css\";\n\nexport default class PlotContainer extends Component {\n\tstatic propTypes = {\n\t\tid: PropTypes.number.isRequired,\n\t\tdone: PropTypes.bool.isRequired,\n\t\tgraphType: PropTypes.string.isRequired,\n\t\tcurrentId: PropTypes.number.isRequired,\n\t\tnodes: PropTypes.array.isRequired,\n\t\tcomponents: PropTypes.array,\n\t\tvisitOrder: PropTypes.array.isRequired,\n\t\taddNode: PropTypes.func.isRequired,\n\t\tupdateNodes: PropTypes.func.isRequired,\n\t\tinitialiseNodes: PropTypes.func.isRequired,\n\t};\n\n\trender() {\n\t\treturn <div className=\"PlotContainer\" id={`plot${this.props.id}`}></div>;\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.initialiseNodes(this.getDimensions());\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.draw();\n\t}\n\n\tgetDimensions() {\n\t\tlet svgElem = d3.select(\".PlotContainer\").node();\n\t\treturn {\n\t\t\tx: svgElem.clientWidth,\n\t\t\ty: svgElem.clientHeight,\n\t\t};\n\t}\n\n\tdraw() {\n\t\tlet self = this;\n\n\t\td3.selectAll(`.PlotContainer#plot${self.props.id} svg`).remove();\n\n\t\tlet svg = d3\n\t\t\t.select(`.PlotContainer#plot${self.props.id}`)\n\t\t\t.append(\"svg\")\n\t\t\t// .attr('viewBox', '0 0 500 300')\n\t\t\t.classed(\"done\", self.props.done)\n\t\t\t.on(\"click\", function () {\n\t\t\t\t// We need this context, cant use ES6 anonymous function\n\t\t\t\tif (d3.event.defaultPrevented) return;\n\t\t\t\tlet coords = d3.mouse(this);\n\t\t\t\tself.props.addNode(coords[0], coords[1]);\n\t\t\t});\n\n\t\tlet defs = svg.append(\"defs\");\n\n\t\tdefs\n\t\t\t.append(\"marker\")\n\t\t\t.attr(\"id\", \"arrowhead\")\n\t\t\t.attr(\"class\", \"ArrowHead\")\n\t\t\t.attr(\"refX\", 22) /*must be smarter way to calculate shift*/\n\t\t\t.attr(\"refY\", 4)\n\t\t\t.attr(\"markerWidth\", 12)\n\t\t\t.attr(\"markerHeight\", 8)\n\t\t\t.attr(\"orient\", \"auto\")\n\t\t\t.append(\"path\")\n\t\t\t.attr(\"d\", \"M 0,0 V 8 L12,4 Z\"); //this is actual shape for arrowhead\n\n\t\tdefs\n\t\t\t.append(\"marker\")\n\t\t\t.attr(\"id\", \"arrowhead-dragging\")\n\t\t\t.attr(\"class\", \"ArrowHead dragging\")\n\t\t\t.attr(\"refX\", 10) /*must be smarter way to calculate shift*/\n\t\t\t.attr(\"refY\", 4)\n\t\t\t.attr(\"markerWidth\", 12)\n\t\t\t.attr(\"markerHeight\", 8)\n\t\t\t.attr(\"orient\", \"auto\")\n\t\t\t.append(\"path\")\n\t\t\t.attr(\"d\", \"M 0,0 V 8 L12,4 Z\"); //this is actual shape for arrowhead\n\n\t\tdefs\n\t\t\t.append(\"marker\")\n\t\t\t.attr(\"id\", \"arrowhead-traversed\")\n\t\t\t.attr(\"class\", \"ArrowHead traversed\")\n\t\t\t.attr(\"refX\", 22) /*must be smarter way to calculate shift*/\n\t\t\t.attr(\"refY\", 4)\n\t\t\t.attr(\"markerWidth\", 12)\n\t\t\t.attr(\"markerHeight\", 8)\n\t\t\t.attr(\"orient\", \"auto\")\n\t\t\t.append(\"path\")\n\t\t\t.attr(\"d\", \"M 0,0 V 8 L12,4 Z\"); //this is actual shape for arrowhead\n\n\t\tif (this.props.components) {\n\t\t\tthis.props.components.forEach(this.drawComponent.bind(this));\n\t\t}\n\t\tthis.props.nodes.forEach(this.drawEdges.bind(this));\n\t\tthis.props.nodes.forEach(this.drawNode.bind(this));\n\n\t\tthis.props.nodes.forEach((n) => {\n\t\t\t//console.log('Node', n.id, 'Index', n.visitIndex, 'Low Link', n.lowLink);\n\t\t\t//console.log(`  new NodeModel(${n.id}, ${n.x}, ${n.y}, [${n.children}], [${n.parents}]),`);\n\t\t});\n\t}\n\n\tdrawComponent(component) {\n\t\tlet svg = d3.select(`.PlotContainer#plot${this.props.id} svg`);\n\n\t\tif (component.length === 1) {\n\t\t\tlet node = this.props.nodes.find((n) => n.id === component[0]);\n\t\t\tsvg\n\t\t\t\t.append(\"circle\")\n\t\t\t\t.attr(\"class\", \"GraphComponent-circle\")\n\t\t\t\t.attr(\"cx\", node.x)\n\t\t\t\t.attr(\"cy\", node.y)\n\t\t\t\t.attr(\"r\", 20);\n\t\t} else {\n\t\t\tlet points = component\n\t\t\t\t.map((c) => {\n\t\t\t\t\tlet node = this.props.nodes.find((n) => n.id === c);\n\t\t\t\t\treturn [node.x, node.y].join(\",\");\n\t\t\t\t})\n\t\t\t\t.join(\" \");\n\n\t\t\tsvg\n\t\t\t\t.append(\"polygon\")\n\t\t\t\t.attr(\"class\", \"GraphComponent-poly\")\n\t\t\t\t.attr(\"points\", points);\n\t\t}\n\t}\n\n\tdrawEdges(node) {\n\t\tlet self = this;\n\t\tlet svg = d3.select(`.PlotContainer#plot${this.props.id} svg`);\n\n\t\tnode.children.forEach((childId) => {\n\t\t\tlet child = self.props.nodes.find((n) => n.id === childId);\n\n\t\t\tlet markerId =\n\t\t\t\tchild.visitedFrom === node.id ? \"#arrowhead-traversed\" : \"#arrowhead\";\n\n\t\t\tsvg\n\t\t\t\t.append(\"line\")\n\t\t\t\t.attr(\"class\", \"Edge\")\n\t\t\t\t.attr(\"marker-end\", `url(${markerId})`)\n\t\t\t\t.attr(\"x1\", node.x)\n\t\t\t\t.attr(\"y1\", node.y)\n\t\t\t\t.attr(\"x2\", child.x)\n\t\t\t\t.attr(\"y2\", child.y)\n\t\t\t\t.classed(\"traversed\", child.visitedFrom === node.id)\n\t\t\t\t.classed(\n\t\t\t\t\t\"not-traversed\",\n\t\t\t\t\tchild.visited && child.visitedFrom !== node.id\n\t\t\t\t);\n\t\t});\n\t}\n\n\tdrawNode(node) {\n\t\tlet self = this;\n\n\t\tlet svg = d3.select(`.PlotContainer#plot${self.props.id} svg`);\n\n\t\tlet drag = d3.behavior\n\t\t\t.drag()\n\t\t\t.on(\"dragstart\", function (d) {\n\t\t\t\tself.props.updateNodes(\n\t\t\t\t\tself.props.nodes.map((n) => {\n\t\t\t\t\t\tif (n.id === node.id) {\n\t\t\t\t\t\t\tn.selected = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn n;\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\t\td3.select(`.PlotContainer#plot${self.props.id} svg`)\n\t\t\t\t\t.append(\"line\")\n\t\t\t\t\t.attr(\"class\", \"Edge dragging\")\n\t\t\t\t\t.attr(\"x1\", node.x)\n\t\t\t\t\t.attr(\"y1\", node.y)\n\t\t\t\t\t.attr(\"x2\", node.x)\n\t\t\t\t\t.attr(\"y2\", node.y);\n\t\t\t})\n\t\t\t.on(\"drag\", function (d) {\n\t\t\t\tlet draggedLine = d3.select(\n\t\t\t\t\t`.PlotContainer#plot${self.props.id} svg .Edge.dragging`\n\t\t\t\t);\n\t\t\t\tlet x2 = d3.event.sourceEvent.offsetX - node.size;\n\t\t\t\tlet y2 = d3.event.sourceEvent.offsetY - node.size;\n\t\t\t\tlet target = d3.event.sourceEvent.target;\n\n\t\t\t\tif (target.tagName === \"circle\") {\n\t\t\t\t\tx2 = d3.select(`#${target.id}`).attr(\"cx\");\n\t\t\t\t\ty2 = d3.select(`#${target.id}`).attr(\"cy\");\n\t\t\t\t}\n\n\t\t\t\tdraggedLine\n\t\t\t\t\t.attr(\"marker-end\", \"url(#arrowhead-dragging)\")\n\t\t\t\t\t.attr(\"x1\", node.x)\n\t\t\t\t\t.attr(\"y1\", node.y)\n\t\t\t\t\t.attr(\"x2\", x2)\n\t\t\t\t\t.attr(\"y2\", y2);\n\t\t\t})\n\t\t\t.on(\"dragend\", function (d) {\n\t\t\t\tlet target = d3.event.sourceEvent.target;\n\t\t\t\tlet connectId;\n\n\t\t\t\td3.event.sourceEvent.stopPropagation();\n\t\t\t\td3.selectAll(\n\t\t\t\t\t`.PlotContainer#plot${self.props.id} svg .Edge.dragging`\n\t\t\t\t).remove();\n\n\t\t\t\tif (target.tagName === \"circle\") {\n\t\t\t\t\tconnectId = parseInt(target.id.substring(5));\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tconnectId &&\n\t\t\t\t\tconnectId !== node.id &&\n\t\t\t\t\tnode.children.filter((c) => c === connectId).length === 0\n\t\t\t\t) {\n\t\t\t\t\tself.props.updateNodes(\n\t\t\t\t\t\tself.props.nodes.map((n) => {\n\t\t\t\t\t\t\tif (n.id === node.id) {\n\t\t\t\t\t\t\t\tn.selected = false;\n\t\t\t\t\t\t\t\tn.children.push(connectId);\n\t\t\t\t\t\t\t\tif (self.props.graphType === \"undirected\") {\n\t\t\t\t\t\t\t\t\tn.parents.push(connectId);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (n.id === connectId) {\n\t\t\t\t\t\t\t\tn.parents.push(node.id);\n\t\t\t\t\t\t\t\tif (self.props.graphType === \"undirected\") {\n\t\t\t\t\t\t\t\t\tn.children.push(node.id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn n;\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\tlet nodeElem = svg\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", \"Node\")\n\t\t\t.attr(\"id\", \"node-\" + node.id)\n\t\t\t.attr(\"cx\", node.x)\n\t\t\t.attr(\"cy\", node.y)\n\t\t\t.attr(\"r\", node.size)\n\t\t\t.classed(\"selected\", node.selected)\n\t\t\t.classed(\"visited\", node.visited)\n\t\t\t.classed(\"articulationPoint\", node.articulationPoint)\n\t\t\t.classed(\"current\", node.current)\n\t\t\t.classed(\"group-1\", node.group === 1)\n\t\t\t.classed(\"group-2\", node.group === 2)\n\t\t\t.classed(\"group-3\", node.group === 3)\n\t\t\t.classed(\"group-4\", node.group === 4)\n\t\t\t.classed(\"group-5\", node.group === 5)\n\t\t\t.on(\"mouseover\", function () {\n\t\t\t\td3.select(this).classed(\"hover\", true);\n\t\t\t})\n\t\t\t.on(\"mouseout\", function () {\n\t\t\t\td3.select(this).classed(\"hover\", false);\n\t\t\t})\n\t\t\t.call(drag);\n\n\t\tsvg\n\t\t\t.append(\"text\")\n\t\t\t.attr(\"class\", \"Node-label\")\n\t\t\t.attr(\"id\", \"label-\" + node.id)\n\t\t\t.attr(\"x\", node.x + node.size * 1.2)\n\t\t\t.attr(\"y\", node.y + node.size * 1.5)\n\t\t\t.text(node.id);\n\n\t\tlet visited = this.props.visitOrder.findIndex((v) => v.id === node.id);\n\n\t\tif (visited > -1) {\n\t\t\tsvg\n\t\t\t\t.append(\"text\")\n\t\t\t\t.attr(\"class\", \"Node-visitLabel\")\n\t\t\t\t.attr(\"id\", \"visitlabel-\" + node.id)\n\t\t\t\t.attr(\"x\", node.x - node.size * 1.5)\n\t\t\t\t.attr(\"y\", node.y + node.size * 1.5)\n\t\t\t\t.text(visited + 1);\n\t\t}\n\t}\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./PlotExplanation.css\";\n\nexport default class PlotExplanation extends Component {\n\tstatic propTypes = {\n\t\texplanation: PropTypes.array.isRequired,\n\t};\n\n\trender() {\n\t\tlet { explanation } = this.props;\n\n\t\treturn (\n\t\t\t<div className=\"PlotExplained\">\n\t\t\t\t<h2>Algorithm Output</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t{explanation.map((line, id) => (\n\t\t\t\t\t\t<li key={`line-${id}`}>{line}</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","export default class Node {\n\tconstructor(id, x, y, children, parents) {\n\t\tthis.id = id;\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.children = children || [];\n\t\tthis.parents = parents || [];\n\n\t\tthis.size = 10;\n\t\tthis.selected = false;\n\t\tthis.current = false;\n\n\t\tthis.visited = false;\n\t\tthis.visitIndex = null;\n\t\tthis.visitedFrom = null;\n\n\t\tthis.articulationPoint = false;\n\t\tthis.lowLink = null;\n\t\tthis.group = null;\n\n\t\tthis.childVisitCount = 0;\n\t}\n\n\thasChildren() {\n\t\treturn this.children && this.children.length > 0;\n\t}\n\n\treset() {\n\t\tthis.visited = false;\n\t\tthis.lowLink = null;\n\t\tthis.current = false;\n\t\tthis.visitedFrom = null;\n\t\tthis.visitIndex = null;\n\t\tthis.articulationPoint = false;\n\t\tthis.childVisitCount = 0;\n\t\tthis.group = null;\n\t}\n}\n","import Promise from \"bluebird\";\nimport _ from \"lodash\";\n\nimport NodeModel from \"./models/NodeModel\";\n\n/**\n * Creates a sequence of promises to processed\n *\n * @param  {Array of tasks} tasks\n *\n * @return {Promise}\n */\nexport const promiseSequence = (tasks) => {\n\tlet current = Promise.resolve(true);\n\n\ttasks.map((task) => {\n\t\tcurrent = current.then(task);\n\t\treturn current;\n\t});\n};\n\n/**\n * While loop promisified\n *\n * @param  {Function} predicate function that returns boolean\n * @param  {Function} action block of action to complete\n *\n * @return {Promise}\n */\nexport const promiseWhile = (predicate, action) => {\n\tlet loop = () => {\n\t\tif (!predicate()) {\n\t\t\treturn;\n\t\t}\n\t\treturn Promise.resolve(action()).then(loop);\n\t};\n\n\treturn Promise.resolve(true).then(loop);\n};\n\nexport const getDirectedTree = () => {\n\treturn [\n\t\tnew NodeModel(1, 41, 50, [2, 3, 5]),\n\n\t\tnew NodeModel(2, 41, 120, [4, 5], [1]),\n\t\tnew NodeModel(3, 97, 90, [5, 6, 7], [1]),\n\n\t\tnew NodeModel(4, 42, 190, [8, 9], [2]),\n\t\tnew NodeModel(5, 100, 190, [9], [1, 2, 3]),\n\n\t\tnew NodeModel(6, 160, 160, null, [3]),\n\t\tnew NodeModel(7, 190, 135, null, [3]),\n\n\t\tnew NodeModel(8, 42, 276, null, [4]),\n\t\tnew NodeModel(9, 101, 278, null, [4, 5]),\n\t];\n};\n\nexport const getDirectedGraph = () => {\n\treturn [\n\t\tnew NodeModel(1, 81, 138.3125, [2, 3, 7], []),\n\t\tnew NodeModel(2, 178, 80.3125, [4, 7], [1]),\n\t\tnew NodeModel(3, 173, 198.3125, [5, 7], [1]),\n\t\tnew NodeModel(4, 321, 72.3125, [6], [2]),\n\t\tnew NodeModel(5, 318, 209.3125, [6], [3]),\n\t\tnew NodeModel(6, 432, 138.3125, [], [4, 5, 7]),\n\t\tnew NodeModel(7, 319, 136.3125, [6], [1, 2, 3]),\n\t];\n};\n\nexport const getDirectedCycle = () => {\n\treturn [\n\t\tnew NodeModel(1, 86, 76.3125, [2], [7]),\n\t\tnew NodeModel(2, 86, 217.3125, [3], [1]),\n\t\tnew NodeModel(3, 179, 222.3125, [4], [2]),\n\t\tnew NodeModel(4, 287, 222.3125, [5], [3]),\n\t\tnew NodeModel(5, 290, 144.3125, [6], [4]),\n\t\tnew NodeModel(6, 284, 68.3125, [7], [5]),\n\t\tnew NodeModel(7, 176, 68.3125, [1], [6]),\n\t];\n};\n\nexport const getDisconnectedComponents = () => {\n\treturn [\n\t\tnew NodeModel(1, 62, 68.3125, [2], [3]),\n\t\tnew NodeModel(2, 59, 231.3125, [3], [1]),\n\t\tnew NodeModel(3, 211, 230.3125, [1], [2]),\n\t\tnew NodeModel(4, 349, 60.3125, [5], [5]),\n\t\tnew NodeModel(5, 344, 233.3125, [4], [4]),\n\t\tnew NodeModel(6, 211, 65.3125, [7], [7]),\n\t\tnew NodeModel(7, 207, 159.3125, [6], [6]),\n\t];\n};\n\nexport const getNotBiconnected = () => {\n\treturn [\n\t\tnew NodeModel(1, 55, 32.3125, [2], [2]),\n\t\tnew NodeModel(2, 179, 70.3125, [1, 3], [1, 3]),\n\t\tnew NodeModel(3, 89, 175.3125, [2, 4], [2, 4]),\n\t\tnew NodeModel(4, 218, 200.3125, [3], [3]),\n\t];\n};\n\nexport const getBiconnected = () => {\n\treturn [\n\t\tnew NodeModel(1, 163, 54.265625, [3, 2, 5], [3, 2, 5]),\n\t\tnew NodeModel(2, 301, 94.265625, [4, 1, 5], [4, 1, 5]),\n\t\tnew NodeModel(3, 152, 213.265625, [1, 4], [1, 4]),\n\t\tnew NodeModel(4, 317, 220.265625, [3, 2], [3, 2]),\n\t\tnew NodeModel(5, 224, 143.265625, [1, 2], [1, 2]),\n\t];\n};\n\nexport const getNotBipartite = () => {\n\treturn [\n\t\tnew NodeModel(1, 234, 30.265625, [2, 3, 5, 6], [2, 3, 5, 6]),\n\t\tnew NodeModel(2, 168, 120.265625, [1, 4, 5], [1, 4, 5]),\n\t\tnew NodeModel(3, 323, 109.265625, [1, 6, 7], [1, 6, 7]),\n\t\tnew NodeModel(4, 119, 219.265625, [2], [2]),\n\t\tnew NodeModel(5, 202, 216.265625, [1, 2], [2, 1]),\n\t\tnew NodeModel(6, 281, 216.265625, [1, 3], [1, 3]),\n\t\tnew NodeModel(7, 365, 213.265625, [3], [3]),\n\t];\n};\n\nexport const getBipartite = () => {\n\treturn [\n\t\tnew NodeModel(1, 221, 27.3125, [2, 3], [2, 3]),\n\t\tnew NodeModel(2, 169, 108.3125, [1, 4, 5, 6], [1, 4, 5, 6]),\n\t\tnew NodeModel(3, 260, 109.3125, [1, 6, 7], [1, 6, 7]),\n\t\tnew NodeModel(4, 114, 206.3125, [2, 8, 9], [2, 8, 9]),\n\t\tnew NodeModel(5, 184, 206.3125, [2, 10, 11], [10, 11, 2]),\n\t\tnew NodeModel(6, 237, 203.3125, [2, 3, 12, 13], [3, 12, 2, 13]),\n\t\tnew NodeModel(7, 322, 203.3125, [3, 13, 14, 15], [3, 14, 13, 15]),\n\t\tnew NodeModel(8, 77, 304.3125, [4], [4]),\n\t\tnew NodeModel(9, 131, 300.3125, [4], [4]),\n\t\tnew NodeModel(10, 163, 302.3125, [5], [5]),\n\t\tnew NodeModel(11, 204, 302.3125, [5], [5]),\n\t\tnew NodeModel(12, 238, 300.3125, [6], [6]),\n\t\tnew NodeModel(13, 279, 301.3125, [6, 7], [6, 7]),\n\t\tnew NodeModel(14, 326, 302.3125, [7], [7]),\n\t\tnew NodeModel(15, 372, 301.3125, [7], [7]),\n\t];\n};\n\nexport const getBiconnectedBipartite = () => {\n\treturn [\n\t\tnew NodeModel(1, 40, 37.3125, [7, 2, 3], [7, 2, 3]),\n\t\tnew NodeModel(2, 39, 286.3125, [8, 1, 4], [8, 1, 4]),\n\t\tnew NodeModel(3, 122, 114.3125, [1, 6, 4], [1, 6, 4]),\n\t\tnew NodeModel(4, 122, 212.3125, [5, 3, 2], [5, 3, 2]),\n\t\tnew NodeModel(5, 258, 209.3125, [6, 4, 8], [6, 4, 8]),\n\t\tnew NodeModel(6, 251, 106.3125, [3, 5, 7], [3, 5, 7]),\n\t\tnew NodeModel(7, 328, 27.3125, [1, 8, 6], [1, 8, 6]),\n\t\tnew NodeModel(8, 330, 288.3125, [7, 2, 5], [7, 2, 5]),\n\t];\n};\n\nexport const exampleGraphs = {\n\tdirectedTree: getDirectedTree,\n\tdirectedGraph: getDirectedGraph,\n\tdirectedCycle: getDirectedCycle,\n\tdisconnectedComponents: getDisconnectedComponents,\n\tnotBiconnected: getNotBiconnected,\n\tbiconnected: getBiconnected,\n\tbiconnectedBipartite: getBiconnectedBipartite,\n\tnotBipartite: getNotBipartite,\n\tbipartite: getBipartite,\n};\n\nexport const getExampleGraph = (key) => {\n\tif (exampleGraphs[key]) {\n\t\treturn exampleGraphs[key]();\n\t} else {\n\t\treturn [];\n\t}\n};\n\n/**\n * Generate an example graph\n *\n * @param  {Number} childCount number of children for each parent\n * @param  {Number} maxDepth   max depth of generated graph\n * @param  {Number} maxX       maximum value of x coord\n * @param  {Number} maxY       maximum value of y coord\n * @param  {Number} padding    padding on outside of drawn graph\n *\n * @return {Array}             set of Nodes\n */\nexport const generateTree = (\n\tchildCount,\n\tmaxDepth,\n\tmaxX,\n\tmaxY,\n\tpadding,\n\tprob\n) => {\n\tprob = prob || 0.7;\n\tvar root = new NodeModel(1, maxX / 2, padding);\n\tvar nodes = [];\n\tvar currentDepth = 1;\n\tlet totalNodes =\n\t\t_.range(1, maxDepth + 1).reduce(\n\t\t\t(sum, curr) => sum + Math.pow(childCount, curr),\n\t\t\t0\n\t\t) + 1;\n\tlet bottomNodes = Math.pow(childCount, maxDepth);\n\n\treturn generateChildren(maxX, maxY, root, currentDepth);\n\n\tfunction generateChildren(mx, my, parent, currentDepth) {\n\t\tlet maxId = nodes.length > 0 ? nodes[nodes.length - 1].id : root.id;\n\t\tlet nodesAtDepth = Math.pow(childCount, currentDepth);\n\t\tlet sectionSize = (mx - padding) / nodesAtDepth;\n\t\tlet sectionSpread = sectionSize * childCount;\n\t\tlet sectionStart = parent.x - sectionSpread / 2 + sectionSize / 2;\n\t\tlet xrange = _.range(\n\t\t\tsectionStart,\n\t\t\tsectionStart + sectionSpread,\n\t\t\tsectionSize\n\t\t);\n\t\tlet dy = Math.floor((my - padding * 2) / maxDepth);\n\n\t\tlet children = _.range(childCount).map((i) => {\n\t\t\treturn new NodeModel(++maxId, xrange[i], parent.y + dy);\n\t\t});\n\n\t\tchildren = children.filter((c) => {\n\t\t\treturn Math.random() <= prob;\n\t\t});\n\n\t\tchildren.forEach((child) => {\n\t\t\tparent.children.push(child.id);\n\t\t});\n\n\t\tnodes = _.concat(\n\t\t\tnodes.filter((n) => n.id !== parent.id),\n\t\t\tparent,\n\t\t\tchildren\n\t\t);\n\n\t\tif (currentDepth < maxDepth) {\n\t\t\treturn _.uniq(\n\t\t\t\t_.flatMap(children, (child) =>\n\t\t\t\t\tgenerateChildren(mx, my, child, currentDepth + 1)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\treturn nodes;\n\t\t}\n\t}\n};\n","import _ from 'lodash';\nimport Promise from 'bluebird';\n\n/**\n * Depth First Search Algorithm Class\n */\nexport default class DepthFirstSearch {\n  /**\n   * @constructor\n   * \n   * @param  {Array} nodes     An array of NodeModel objects\n   * @param  {React/Component} component A React Component\n   * @param  {Number} pause    \n   */\n  constructor(nodes, component, pause = 500) {\n    this.nodes = nodes;\n    this.component = component;\n    this.stack = [];\n    this.visitOrder = [];\n    this.explanation = [];\n    this.pause = pause;\n  }\n\n  /**\n   * Log a message (used for incremental updates about algorithms progress)\n   * \n   * @param  {String} text\n   */\n  log(text) {\n    console.log(text);\n    this.explanation.push(text);\n    this.component.setState({\n      explanation: _.assign([],this.explanation)\n    });\n  }\n\n  /**\n   * Start the search process\n   * \n   * @param  {NodeModel} startNode\n   * \n   * @return {Promise}\n   */\n  start(startNode) {\n    if (!this.nodes || this.nodes.length === 0) {\n      this.log(' | No nodes to search!');\n      return Promise.reject(new Error('No Nodes to search!'));\n    }\n    startNode = startNode || this.nodes[0];\n\n    this.log(` | Start at ${startNode.id}`);\n    return this.search(startNode)\n    .catch((e) => {\n      this.log(e.message);\n      this.log(' | Search Steps');\n      this.log(' | ------------');\n      this.visitOrder.forEach((node, id) => this.log(` | Step ${id+1} -> Node ${node.id}`) );\n    });\n  }\n\n  /**\n   * Update the component's state with the nodes array that\n   * reflects current status of search\n   * \n   * @param  {NodeModel} currentNode\n   * \n   * @return {Promise}\n   */\n  updateComponent(currentNode, parentNode) {\n    return Promise.resolve()\n    .then(() => {\n      let updateState = this.nodes.map((node) => {\n        if (node.id === currentNode.id) {\n          node.current = true;\n          if (parentNode) {\n            node.visitedFrom = parentNode.id;\n          }\n        } else {\n          node.current = false;\n        }\n\n        return node;\n      });\n      this.component.setState({\n        nodes: updateState,\n        visitOrder: _.assign([], this.visitOrder)\n      });\n\n      return Promise.delay(this.pause);\n    });\n  }\n\n  /**\n   * Search a node\n   *\n   *  - This function triggers an update to the UI\n   *  - If the node has not been visited it marks it as visited\n   *  - If the node has no children or all children have been visited it will move back to parent\n   *  - If the node has children that are still be visited it will move to next available child\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Promise}\n   */\n  search(node, parent) {\n    if (parent) {\n      console.log('Parent set', 'parent is', parent.id, 'child is', node.id);\n    }\n    if (!node) {\n      return;\n    }\n\n    return this.updateComponent(node, parent)\n    .then(() => {\n      if (!node.visited) {\n        this.markAsVisited(node);\n      }\n\n      if (!node.hasChildren() || this.allChildrenVisited(node)) {\n        return this.moveToParent();\n      } else {\n        return this.moveToNextChild();\n      }\n    });\n  }\n  /**\n   * Returns a node that sits at the top of the stack\n   * \n   * @return {NodeModel} [description]\n   *\n   * @throws {Error} If the stack is empty\n   */\n  peek() {\n    if (this.stack.length === 0) {\n      throw new Error(' | Stack empty, DFS complete!');\n    }\n\n    return this.stack[this.stack.length - 1];\n  }\n\n  /**\n   * Moves back to the parent node and triggers a UI update\n   * \n   * @return {Promise}\n   */\n  moveToParent() {\n    this.log(' | Move Up!');\n    this.stack.pop();\n    let currentNode = this.peek();\n    this.updateComponent(currentNode);\n    return this.search(currentNode);\n  }\n\n  /**\n   * Moves to the next available child\n   * \n   * @return {Promise}\n   */\n  moveToNextChild() {\n    this.log(' | Move Down!');\n    let parent = this.peek();\n    let sortedChildren = this.sortChildren(parent);\n\n    let unvisitedChildren = sortedChildren.filter((x) =>  {\n      let node = this.nodes.find((n) => n.id === x);\n      return !node.visited;\n    });\n\n    if (unvisitedChildren.length === 0) {\n      return Promise.resolve();\n    } else {\n      let nextId = unvisitedChildren.pop();\n      let next = this.nodes.find((x) => x.id === nextId);\n      return this.search(next, parent);\n    }\n  }\n\n  /**\n   * Marks a Node as visited, updates the stack and output order\n   * \n   * @param  {NodeModel} node\n   */\n  markAsVisited(node) {\n    this.log(` | Visit ${node.id}`);\n    node.visited = true;\n    this.stack.push(node);\n    this.visitOrder.push(node);\n  }\n\n  /**\n   * Sorts the children of a NodeModel by natural ordering\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Array}\n   */\n  sortChildren(node) {\n    return node.children.sort((a,b) => {\n      if (a > b) return -1;\n      if (a < b) return 1;\n      return 0;\n    });\n  }\n\n  /**\n   * Checks to see if all children of a NodeModel has been visited or not\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Boolean}\n   */\n  allChildrenVisited(node) {\n    let output = node.children.reduce((prev, current) =>  {\n      let currentNode = this.nodes.find((x) => x.id === current);\n      return prev && currentNode.visited;\n    }, true);\n    return output;\n  }\n}","export default class Queue {\n\t/**\n\t * Queue - a First in - First Out (FIFO) data structure\n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.internal = [];\n\t}\n\n\tisNotEmpty() {\n\t\treturn this.internal && this.internal.length > 0;\n\t}\n\n\tenqueue(value) {\n\t\tthis.internal.push(value);\n\t}\n\n\tdequeue() {\n\t\tif (!this.isNotEmpty()) {\n\t\t\tthrow new Error(\"Queue is empty!\");\n\t\t}\n\n\t\treturn this.internal.shift();\n\t}\n}\n","import _ from 'lodash';\nimport Promise from 'bluebird';\n\nimport Queue from '../dataStructures/Queue';\nimport { promiseWhile } from '../utils';\n\n/**\n * Depth First Search Algorithm Class\n */\nexport default class BreadthFirstSearch {\n  /**\n   * @constructor\n   * \n   * @param  {Array} nodes     An array of NodeModel objects\n   * @param  {React/Component} component A React Component\n   * @param  {Number} pause    \n   */\n  constructor(nodes, component, pause = 500) {\n    this.nodes = nodes;\n    this.component = component;\n    this.queue = new Queue();\n    this.visitOrder = [];\n    this.explanation = [];\n    this.pause = pause;\n  }\n\n  /**\n   * Log a message (used for incremental updates about algorithms progress)\n   * \n   * @param  {String} text\n   */\n  log(text) {\n    console.log(text);\n    this.explanation.push(text);\n    this.component.setState({\n      explanation: _.assign([],this.explanation)\n    });\n  }\n\n  /**\n   * Start the search process\n   * \n   * @param  {NodeModel} startNode\n   * \n   * @return {Promise}\n   */\n  start(startNode) {\n    if (!this.nodes || this.nodes.length === 0) {\n      this.log(' | No nodes to search!');\n      return Promise.reject(new Error('No Nodes to search!'));\n    }\n    startNode = startNode || this.nodes[0];\n\n    this.log(` | Start at ${startNode.id}`);\n    return this.search(startNode)\n    .then(() => {\n      this.log(' | Queue empty, BFS complete!');\n      this.log(' | Search Steps');\n      this.log(' | ------------');\n      this.visitOrder.forEach((node, id) => this.log(` | Step ${id+1} -> Node ${node.id}`) );\n    })\n    .catch((e) => {\n      this.log(e);\n    });\n  }\n\n  /**\n   * Update the component's state with the nodes array that\n   * reflects current status of search\n   * \n   * @param  {NodeModel} currentNode\n   * \n   * @return {Promise}\n   */\n  updateComponent(currentNode, parentId) {\n    return Promise.resolve()\n    .then(() => {\n      let updateState = this.nodes.map((node) => {\n        node.current = (node.id === currentNode.id);\n        if (parentId && node.id === currentNode.id) {\n          node.visitedFrom = parentId;\n        }\n        return node;\n      });\n\n      this.component.setState({\n        nodes: updateState,\n        visitOrder: _.assign([], this.visitOrder)\n      });\n\n      return Promise.delay(this.pause);\n    });\n  }\n\n  /**\n   * Search a node\n   *\n   *  - This function triggers an update to the UI\n   *  - If the node has not been visited it marks it as visited\n   *  - If the node has no children or all children have been visited it will move back to parent\n   *  - If the node has children that are still be visited it will move to next available child\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Promise}\n   */\n  search(node) {\n    if (!node) {\n      return;\n    }\n\n    return this.updateComponent(node)\n    .then(() => {\n      if (!node.visited) {\n        this.log(` | Enqueued ${node.id}`);\n        this.queue.enqueue([node.id, null]);\n      }\n\n      return promiseWhile(this.queue.isNotEmpty.bind(this.queue), () => {\n        let edge = this.queue.dequeue();\n        let currentNode = this.nodes.find((n) => n.id === edge[0]);\n        let parentId = null;\n        if (!currentNode.visited) {\n          parentId = edge[1];\n          this.markAsVisited(currentNode);\n          this.enqueueUnvisitedChildren(currentNode);\n        }\n        \n        return this.updateComponent(currentNode, parentId);\n      });\n    });\n  }\n\n  enqueueUnvisitedChildren(parent) {\n    let sortedChildren = this.sortChildren(parent);\n    sortedChildren.forEach((childId) => {\n      let node = this.nodes.find((n) => n.id === childId);\n      if (!node.visited) {\n        this.log(` | Enqueued ${node.id}`);\n        this.queue.enqueue([node.id, parent.id]);\n      }\n    });\n  }\n\n  /**\n   * Marks a Node as visited, updates the stack and output order\n   * \n   * @param  {NodeModel} node\n   */\n  markAsVisited(node) {\n    this.log(` | Visit ${node.id}`);\n    node.visited = true;\n    this.visitOrder.push(node);\n  }\n\n  /**\n   * Sorts the children of a NodeModel by natural ordering\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Array}\n   */\n  sortChildren(node) {\n    return node.children.sort((a,b) => {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    });\n  }\n}","import _ from 'lodash';\nimport Promise from 'bluebird';\n\nimport Queue from '../dataStructures/Queue';\nimport { promiseSequence, promiseWhile } from '../utils';\n\n/**\n * Depth First Search Algorithm Class\n */\nexport default class BipartitenessAlgorithm {\n  /**\n   * @constructor\n   * \n   * @param  {Array} nodes     An array of NodeModel objects\n   * @param  {React/Component} component A React Component\n   * @param  {Number} pause    \n   */\n  constructor(nodes, component, pause = 500) {\n    this.nodes = nodes;\n    this.component = component;\n    this.queue = new Queue();\n    this.visitOrder = [];\n    this.explanation = [];\n    this.pause = pause;\n  }\n\n  /**\n   * Log a message (used for incremental updates about algorithms progress)\n   * \n   * @param  {String} text\n   */\n  log(text) {\n    console.log(text);\n    this.explanation.push(text);\n    this.component.setState({\n      explanation: _.assign([],this.explanation)\n    });\n  }\n\n  /**\n   * Start the search process\n   * \n   * @param  {NodeModel} startNode\n   * \n   * @return {Promise}\n   */\n  start(startNode) {\n    if (!this.nodes || this.nodes.length === 0) {\n      this.log(' | No nodes to search!');\n      return Promise.reject(new Error('No Nodes to search!'));\n    }\n\n    startNode = startNode || this.nodes[0];\n\n    let startNodes =  [ startNode ].concat(this.nodes.filter((n) => n.parents.length === 0 && n.id !== startNode.id));\n\n    let searches = startNodes.map((n) => () => {\n      this.log(` | Start at ${n.id}`);\n      return this.search(n)\n    });\n\n    return promiseSequence(searches)\n    .then(() => {\n      this.log(' | Queue empty, BFS complete!');\n      let groupings = _.uniq(this.nodes.map((n) => n.group));\n      if (groupings.length === 2) {\n        this.log(' | This graph is a bipartite graph!');\n        this.log(' | Disjoint Sets')\n        this.log(` | Set 1: ${this.nodes.filter((n) => n.group === 1).map((n) => n.id).join(', ')}`)\n        this.log(` | Set 2: ${this.nodes.filter((n) => n.group === 2).map((n) => n.id).join(', ')}`)\n      } else {\n        this.log(' | This graph is not a bipartite graph!');\n        this.log(` | ${groupings.length} groups had to be used`);\n      }\n    })\n    .catch((e) => {\n      this.log(e);\n    });\n  }\n\n  /**\n   * Update the component's state with the nodes array that\n   * reflects current status of search\n   * \n   * @param  {NodeModel} currentNode\n   * \n   * @return {Promise}\n   */\n  updateComponent(currentNode, parentId) {\n    return Promise.resolve()\n    .then(() => {\n      let updateState = this.nodes.map((node) => {\n        node.current = (node.id === currentNode.id);\n        if (parentId && node.id === currentNode.id) {\n          node.visitedFrom = parentId;\n        }\n        return node;\n      });\n\n      this.component.setState({\n        nodes: updateState,\n        visitOrder: _.assign([], this.visitOrder)\n      });\n\n      return Promise.delay(this.pause);\n    });\n  }\n\n  /**\n   * Search a node\n   *\n   *  - This function triggers an update to the UI\n   *  - If the node has not been visited it marks it as visited\n   *  - If the node has no children or all children have been visited it will move back to parent\n   *  - If the node has children that are still be visited it will move to next available child\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Promise}\n   */\n  search(node) {\n    if (!node) {\n      return;\n    }\n\n    return this.updateComponent(node)\n    .then(() => {\n      if (!node.visited) {\n        this.log(` | Enqueued ${node.id}`);\n        this.queue.enqueue([node.id, null]);\n      }\n\n      return promiseWhile(this.queue.isNotEmpty.bind(this.queue), () => {\n        let edge = this.queue.dequeue();\n        let currentNode = this.nodes.find((n) => n.id === edge[0]);\n        let parentId = null;\n        if (!currentNode.visited) {\n          parentId = edge[1];\n          this.markAsVisited(currentNode);\n          this.enqueueUnvisitedChildren(currentNode);\n        }\n        this.groupNode(currentNode);\n        return this.updateComponent(currentNode, parentId);\n      });\n    });\n  }\n\n  enqueueUnvisitedChildren(parent) {\n    let sortedChildren = this.sortChildren(parent);\n    sortedChildren.forEach((childId) => {\n      let node = this.nodes.find((n) => n.id === childId);\n      if (!node.visited) {\n        this.log(` | Enqueued ${node.id}`);\n        this.queue.enqueue([node.id, parent.id]);\n      }\n    });\n  }\n\n  groupNode(node) {\n    if (node.parents.length === 0) {\n      this.log(` |  - set node ${node.id} to group 1`);\n      node.group = 1;\n    } else {\n      let parentGroups = _.sortedUniq(\n        node.parents\n        .map((p) => {\n          let parent = this.nodes.find((n) => n.id === p);\n          return parent.group;\n        })\n        .filter((n) => n !== null)\n        .sort()\n      );\n\n      if (parentGroups.length === 0) {\n        this.log(` |  - set node ${node.id} to group 1`);\n        node.group = 1;\n      } else if (parentGroups.length === 1) {\n        let group = (parentGroups[0] === 1) ? 2 : 1;\n        this.log(` | - set node ${node.id} to group ${group}`);\n        node.group = group;\n      } else {\n        console.log('parentGroups not 1 or 0', parentGroups);\n        let group = parentGroups[parentGroups.length-1] + 1;\n        this.log(` | - set node ${node.id} to group ${group}`);\n        node.group = group;\n      }\n    }\n  }\n\n  /**\n   * Marks a Node as visited, updates the stack and output order\n   * \n   * @param  {NodeModel} node\n   * @param  {NodeModel} parent\n   */\n  markAsVisited(node, parent) {\n    this.log(` | Visit ${node.id}`);\n    node.visited = true;\n    this.visitOrder.push(node);\n  }\n\n  /**\n   * Sorts the children of a NodeModel by natural ordering\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Array}\n   */\n  sortChildren(node) {\n    return node.children.sort((a,b) => {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    });\n  }\n}","export default class Stack {\n\t/**\n\t * Stack - a Last in Last out (LIFO) data structure\n\t *\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.internal = [];\n\t}\n\n\tpeek() {\n\t\tif (!this.internal || this.internal.length === 0) {\n\t\t\tthrow new Error(\"Empty Stack\");\n\t\t}\n\n\t\treturn this.internal[this.internal.length - 1];\n\t}\n\n\tpop() {\n\t\tif (!this.internal || this.internal.length === 0) {\n\t\t\tthrow new Error(\"Empty Stack\");\n\t\t}\n\n\t\tlet pop = this.internal.pop();\n\t\tconsole.log(\"Stack popped\", this.internal, pop);\n\t\treturn pop;\n\t}\n\n\tpush(value) {\n\t\tthis.internal.push(value);\n\t\tconsole.log(\"Stack pushed\", this.internal, value);\n\t}\n}\n","import _ from 'lodash';\nimport Promise from 'bluebird';\n\nimport { promiseSequence } from '../utils';\nimport Stack from '../dataStructures/Stack';\n\n/**\n * Tarjan Strongly Connected Components Graph Algorithm Class\n */\nexport default class TarjanStrongConnection {\n  /**\n   * @constructor\n   * \n   * @param  {Array} nodes     An array of NodeModel objects\n   * @param  {React/Component} component A React Component\n   * @param  {Number} pause    \n   */\n  constructor(nodes, component, pause = 500) {\n    this.nodes = nodes;\n    this.component = component;\n    this.visitIndex = 0;\n    this.stack = new Stack();\n    this.visitOrder = [];\n    this.explanation = [];\n    this.components = [];\n    this.pause = pause;\n  }\n\n  /**\n   * Log a message (used for incremental updates about algorithms progress)\n   * \n   * @param  {String} text\n   */\n  log(text) {\n    console.log(text);\n    this.explanation.push(text);\n    this.component.setState({\n      explanation: _.assign([],this.explanation)\n    });\n  }\n\n  /**\n   * Start the search process\n   * \n   * @param  {NodeModel} startNode\n   * \n   * @return {Promise}\n   */\n  start(startNode) {\n    if (!this.nodes || this.nodes.length === 0) {\n      this.log(' | No nodes to search!');\n      return Promise.reject(new Error('No Nodes to search!'));\n    }\n\n    let searchNodes = this.nodes.map((node) => () => this.search(node));\n    \n    return promiseSequence(searchNodes)\n    .then(() => {\n      this.log(' | Strongly Connected Components');\n      this.log(' | ------------');\n      this.components.forEach((component, id) => this.log(` | Component ${id} -> ${component.join(', ')}`) );\n      this.component.setState({\n        components: _.assign([], this.components)\n      });\n    });\n  }\n\n  /**\n   * Update the component's state with the nodes array that\n   * reflects current status of search\n   * \n   * @param  {NodeModel} currentNode\n   * \n   * @return {Promise}\n   */\n  updateComponent(currentNode, parentNode) {\n    return Promise.resolve()\n    .then(() => {\n      let updateState = this.nodes.map((node) => {\n        if (node.id === currentNode.id) {\n          node.current = true;\n          if (parentNode) {\n            node.visitedFrom = parentNode.id;\n          }\n        } else {\n          node.current = false;\n        }\n\n        return node;\n      });\n      this.component.setState({\n        nodes: updateState,\n        components: _.assign([], this.components),\n        visitOrder: _.assign([], this.visitOrder)\n      });\n\n      return Promise.delay(this.pause);\n    });\n  }\n\n  /**\n   * Search a node\n   *\n   *  - This function triggers an update to the UI\n   *  - If the node has not been visited it marks it as visited\n   *  - If the node has no children or all children have been visited it will move back to parent\n   *  - If the node has children that are still be visited it will move to next available child\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Promise}\n   */\n  search(node, parent) {\n    if (!node) {\n      return Promise.resolve();\n    }\n\n    if (node.visitIndex !== null) {\n      return Promise.resolve();\n    }\n\n    return this.updateComponent(node, parent)\n    .then(() => {\n      this.markAsVisited(node);\n\n      let childTasks = node.children.map((childId) => {\n        let child = this.nodes.find((x) => x.id === childId);\n        if (child.visitIndex === null) {\n          return () => {\n            return this.search(child, node).then(() => {\n              let updatedChild = this.nodes.find((x) => x.id === childId);\n              node.lowLink = Math.min(node.lowLink, updatedChild.lowLink);\n              return Promise.resolve();\n            });\n          };\n        } else if (child.onStack) {\n          return () => {\n            node.lowLink = Math.min(node.lowLink, child.visitIndex);\n            return Promise.resolve();\n          };\n        } else {\n          return () => { \n            return Promise.resolve();\n          };\n        }\n      });\n\n      return promiseSequence(childTasks)\n      .then(() => {\n        if (node.lowLink === node.visitIndex) {\n          let component = [ node.id ];\n          let otherNodeId = this.stack.pop();\n          let otherNode = this.nodes.find((x) => x.id === otherNodeId);\n          otherNode.onStack = false;\n          while (otherNodeId !== node.id) {\n            component.push(otherNode.id);\n            otherNodeId = this.stack.pop();\n            otherNode = this.nodes.find((x) => x.id === otherNodeId);\n            otherNode.onStack = false;\n          }\n          this.components.push(component);\n          return Promise.resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Marks a Node as visited, updates the stack and output order\n   * \n   * @param  {NodeModel} node\n   */\n  markAsVisited(node) {\n    this.log(` | Visit ${node.id}`);\n    node.visited = true;\n    node.visitIndex = this.visitIndex;\n    node.lowLink = this.visitIndex;\n    node.onStack = true;\n    this.visitIndex++;\n    this.stack.push(node.id);\n    this.visitOrder.push(node);\n  }\n}","import _ from 'lodash';\nimport Promise from 'bluebird';\n\nimport { promiseSequence } from '../utils';\n\n/**\n * Depth First Search Algorithm Class\n */\nexport default class ArticulationPointSearch {\n  /**\n   * @constructor\n   * \n   * @param  {Array} nodes     An array of NodeModel objects\n   * @param  {React/Component} component A React Component\n   * @param  {Number} pause    \n   */\n  constructor(nodes, component, pause = 500) {\n    this.nodes = nodes;\n    this.component = component;\n    this.stack = [];\n    this.visitOrder = [];\n    this.explanation = [];\n    this.currentVisitIndex = 0;\n    this.pause = pause;\n  }\n\n  /**\n   * Log a message (used for incremental updates about algorithms progress)\n   * \n   * @param  {String} text\n   */\n  log(text) {\n    console.log(text);\n    this.explanation.push(text);\n    this.component.setState({\n      explanation: _.assign([],this.explanation)\n    });\n  }\n\n  /**\n   * Start the search process\n   * \n   * @param  {NodeModel} startNode\n   * \n   * @return {Promise}\n   */\n  start(startNode) {\n    if (!this.nodes || this.nodes.length === 0) {\n      this.log(' | No nodes to search!');\n      return Promise.reject(new Error('No Nodes to search!'));\n    }\n    startNode = startNode || this.nodes[0];\n\n    this.log(` | Start at ${startNode.id}`);\n    return this.search(startNode)\n    .then(() => {\n      this.log(' | Search Complete!');\n      let unvisitedPoints = this.nodes.filter((n) => !n.visited);\n      let articulationPoints = this.nodes.filter((n) => n.articulationPoint);\n      if (unvisitedPoints.length === 0 && articulationPoints.length === 0) {\n        this.log(' | This graph is Biconnected!');\n      } else {\n        this.log(' | This graph is not Biconnected');\n        if (articulationPoints.length > 0) {\n          this.log(` | Articulation Points: ${articulationPoints.map((n) => n.id).join(', ')}`);\n        }\n        if (unvisitedPoints.length > 0) {\n          this.log(` | Unvisited Points: ${unvisitedPoints.map((n) => n.id).join(', ')}`);\n        }\n      }\n    });\n  }\n\n  /**\n   * Update the component's state with the nodes array that\n   * reflects current status of search\n   * \n   * @param  {NodeModel} currentNode\n   * \n   * @return {Promise}\n   */\n  updateComponent(currentNode, parentNode) {\n    return Promise.resolve()\n    .then(() => {\n      let updateState = this.nodes.map((node) => {\n        if (node.id === currentNode.id) {\n          node = currentNode;\n          node.current = true;\n        } else {\n          node.current = false;\n        }\n        return node;\n      });\n\n      this.component.setState({\n        nodes: updateState,\n        visitOrder: _.assign([], this.visitOrder)\n      });\n\n      return Promise.delay(this.pause);\n    });\n  }\n\n  /**\n   * Search a node\n   *\n   *  - This function triggers an update to the UI\n   *  - If the node has not been visited it marks it as visited\n   *  - If the node has no children or all children have been visited it will move back to parent\n   *  - If the node has children that are still be visited it will move to next available child\n   * \n   * @param  {NodeModel} node\n   * \n   * @return {Promise}\n   */\n  search(node, parent) {\n    this.log(` | Visit ${node.id}`);\n    node.childVisitCount = 0;\n    node.visited = true;\n    \n    node.visitIndex = this.currentVisitIndex++;\n    node.lowLink = node.visitIndex;\n\n    return this.updateComponent(node, parent)\n      .then(() => {\n        return promiseSequence(node.children.map((c) => () => {\n          var child = this.nodes.find((n) => n.id === c);\n          if (!child.visited) {\n            node.childVisitCount++;\n            child.visitedFrom = node.id;\n\n            return this.search(child, node)\n            .then(() => {\n              node.lowLink = Math.min(node.lowLink, child.lowLink);\n              \n              if (node.visitedFrom === null && node.childVisitCount > 1) {\n                this.log(' | Node is root and has more than one child - it\\'s an articulation point!');\n                node.articulationPoint = true;\n              } else if (node.visitedFrom !== null && child.lowLink >= node.visitIndex) {\n                this.log(` | Node ${node.id} - parent ${node.visitedFrom}`);\n                this.log(' | Node is not root but one of it\\'s children has a back link to an ancestor - it\\'s an articulation point!');\n                node.articulationPoint = true;\n              }\n            });\n          } else {\n            return Promise.resolve()\n              .then(() => {\n                if (child.id !== node.visitedFrom) {\n                  node.lowLink = Math.min(node.lowLink, child.visitIndex);\n                }\n              });\n          }\n        }));\n      });\n  }\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nimport PlotHeader from \"../components/PlotHeader\";\nimport PlotContainer from \"../components/PlotContainer\";\nimport PlotExplanation from \"../components/PlotExplanation\";\n\nimport { getExampleGraph, exampleGraphs } from \"../utils\";\nimport NodeModel from \"../models/NodeModel\";\nimport DepthFirstSearch from \"../algorithms/DepthFirstSearch\";\nimport BreadthFirstSearch from \"../algorithms/BreadthFirstSearch\";\nimport BipartitenessAlgorithm from \"../algorithms/BipartitenessAlgorithm\";\nimport TarjanStrongConnection from \"../algorithms/TarjanStrongConnection\";\nimport ArticulationPointSearch from \"../algorithms/ArticulationPointSearch\";\n\nimport \"./AlgoVizContainer.css\";\n\nconst ALGOS = {\n\tBFS: BreadthFirstSearch,\n\tDFS: DepthFirstSearch,\n\tTSC: TarjanStrongConnection,\n\tAPS: ArticulationPointSearch,\n\tBA: BipartitenessAlgorithm,\n};\n\nexport default class AlgoVizContainer extends Component {\n\tstatic propTypes = {\n\t\ttitle: PropTypes.string.isRequired,\n\t\tname: PropTypes.string.isRequired,\n\t\tselectableAlgorithms: PropTypes.array.isRequired,\n\t\tgraphType: PropTypes.string,\n\t\texampleGraph: PropTypes.string,\n\t\tid: PropTypes.number.isRequired,\n\t};\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\n\t\tthis.state = {\n\t\t\trunning: false,\n\t\t\tdone: false,\n\t\t\talgorithm: this.props.selectableAlgorithms[0],\n\t\t\texampleGraph: this.props.exampleGraph,\n\t\t\tstartNodeId: 1,\n\t\t\tnodes: [],\n\t\t\tcomponents: [],\n\t\t\tvisitOrder: [],\n\t\t\texplanation: [],\n\t\t\tcurrentId: 1,\n\t\t};\n\t}\n\n\tinitialiseNodes(coords) {\n\t\tlet nodes = _.assign([], getExampleGraph(this.state.exampleGraph));\n\n\t\tthis.setState({\n\t\t\tnodes: nodes,\n\t\t\tcurrentId: nodes.length === 0 ? 1 : nodes[nodes.length - 1].id + 1,\n\t\t});\n\t}\n\n\trunAlgorithm() {\n\t\tlet selectedAlgorithm = this.state.algorithm;\n\t\tlet searchAlgorithm = new ALGOS[selectedAlgorithm](this.state.nodes, this);\n\t\t\n\t\tthis.setState({ running: true, done: false });\n\n\t\tlet startNode = this.state.nodes.find(\n\t\t\t(n) => n.id === this.state.startNodeId\n\t\t);\n\t\tsearchAlgorithm\n\t\t\t.start(startNode)\n\t\t\t.then(() => this.setState({ running: false, done: true }))\n\t\t\t.catch((e) => {\n\t\t\t\tthis.setState({ running: false });\n\t\t\t\tconsole.error(e);\n\t\t\t});\n\t}\n\n\tsetStartNodeId(event) {\n\t\tthis.setState({\n\t\t\tstartNodeId: parseInt(event.target.value, 10),\n\t\t});\n\t}\n\n\taddNode(x, y) {\n\t\tlet node = new NodeModel(this.state.currentId, x, y);\n\t\tthis.setState({\n\t\t\tdone: false,\n\t\t\tnodes: _.concat(this.state.nodes, node),\n\t\t\tcurrentId: this.state.currentId + 1,\n\t\t});\n\t}\n\n\tupdateNodes(nodes) {\n\t\tthis.setState({\n\t\t\tdone: false,\n\t\t\tnodes: nodes,\n\t\t});\n\t}\n\n\tclearNodes() {\n\t\tthis.setState({\n\t\t\tnodes: [],\n\t\t\tvisitOrder: [],\n\t\t\texplanation: [],\n\t\t\tcomponents: [],\n\t\t\tcurrentId: 1,\n\t\t});\n\t}\n\n\tresetNodes() {\n\t\tlet update = _.assign([], this.state.nodes);\n\t\tupdate.forEach((x) => x.reset());\n\n\t\tthis.setState({\n\t\t\tnodes: update,\n\t\t\tvisitOrder: [],\n\t\t\texplanation: [],\n\t\t\tcomponents: [],\n\t\t});\n\t}\n\n\tonChangeAlgorithm(event) {\n\t\tthis.setState({ algorithm: event.target.value });\n\t}\n\n\tonChangeGraph(event) {\n\t\tlet nodes = _.assign([], getExampleGraph(event.target.value));\n\n\t\tthis.setState({\n\t\t\tdone: false,\n\t\t\tvisitOrder: [],\n\t\t\texplanation: [],\n\t\t\tcomponents: [],\n\t\t\tnodes: nodes,\n\t\t\texampleGraph: event.target.value,\n\t\t\tcurrentId: nodes.length === 0 ? 1 : nodes[nodes.length - 1].id + 1,\n\t\t});\n\t}\n\n\tonClickRun(event) {\n\t\tevent.preventDefault();\n\t\tif (!this.state.running) {\n\t\t\tthis.resetNodes();\n\t\t\tthis.runAlgorithm();\n\t\t}\n\t}\n\n\tonClickClear(event) {\n\t\tevent.preventDefault();\n\t\tif (!this.state.running) {\n\t\t\tthis.clearNodes();\n\t\t}\n\t}\n\n\trender() {\n\t\tlet selectableAlgos = this.props.selectableAlgorithms;\n\t\tlet headerProps = {\n\t\t\ttitle: this.props.title,\n\t\t\talgorithms: Object.keys(ALGOS).filter(\n\t\t\t\t(algo) => !selectableAlgos || selectableAlgos.includes(algo)\n\t\t\t),\n\t\t\texampleGraphs: exampleGraphs,\n\t\t\tselectedExampleGraph: this.state.exampleGraph,\n\t\t\tnodes: this.state.nodes,\n\t\t\tselectedAlgorithm: this.state.algorithm,\n\t\t\trunning: this.state.running,\n\t\t\tstartNodeId: this.state.startNodeId,\n\t\t\tsetStartNodeId: this.setStartNodeId.bind(this),\n\t\t\tonChangeGraph: this.onChangeGraph.bind(this),\n\t\t\tonChangeAlgorithm: this.onChangeAlgorithm.bind(this),\n\t\t\tonClickRun: this.onClickRun.bind(this),\n\t\t\tonClickClear: this.onClickClear.bind(this),\n\t\t};\n\n\t\tlet containerProps = {\n\t\t\tid: this.props.id,\n\t\t\tgraphType: this.props.graphType || \"directed\",\n\t\t\tdone: this.state.done,\n\t\t\tcurrentId: this.state.currentId,\n\t\t\tnodes: this.state.nodes,\n\t\t\tcomponents: this.state.components,\n\t\t\tvisitOrder: this.state.visitOrder,\n\t\t\taddNode: this.addNode.bind(this),\n\t\t\tupdateNodes: this.updateNodes.bind(this),\n\t\t\tinitialiseNodes: this.initialiseNodes.bind(this),\n\t\t};\n\n\t\treturn (\n\t\t\t<a name={this.props.name} href=\"#!\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"AlgoVizContainer\"\n\t\t\t\t\tdata-bottom-top=\"opacity:0;\"\n\t\t\t\t\tdata-top=\"opacity:1;\"\n\t\t\t\t>\n\t\t\t\t\t<PlotHeader {...headerProps} />\n\t\t\t\t\t<PlotContainer {...containerProps} />\n\t\t\t\t\t<PlotExplanation explanation={this.state.explanation} />\n\t\t\t\t</div>\n\t\t\t</a>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\n\nimport AlgoVizContainer from \"./AlgoVizContainer\";\n\nimport \"./AppContainer.css\";\n\nexport default class AppContainer extends Component {\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\n\t\tthis.state = {\n\t\t\tmenuVisible: false,\n\t\t};\n\t}\n\n\ttoggleMenu() {\n\t\tthis.setState({\n\t\t\tmenuVisible: !this.state.menuVisible,\n\t\t});\n\t}\n\n\trender() {\n\t\tlet cssClass = this.state.menuVisible\n\t\t\t? \"AppContainer pad-left\"\n\t\t\t: \"AppContainer\";\n\t\treturn (\n\t\t\t<div className={cssClass}>\n\t\t\t\t<AlgoVizContainer\n\t\t\t\t\tid={1}\n\t\t\t\t\tname={\"main-visualisation\"}\n\t\t\t\t\ttitle={\"Graph Traversal Algorithms\"}\n\t\t\t\t\tselectableAlgorithms={[\"DFS\", \"BFS\", \"TSC\", \"APS\", \"BA\"]}\n\t\t\t\t\texampleGraph={\"directedGraph\"}\n\t\t\t\t/>\n\t\t\t\t<AlgoVizContainer\n\t\t\t\t\tid={2}\n\t\t\t\t\tname={\"dfs-visualisation\"}\n\t\t\t\t\ttitle={\"Depth First Search\"}\n\t\t\t\t\tselectableAlgorithms={[\"DFS\", \"BFS\"]}\n\t\t\t\t\texampleGraph={\"directedTree\"}\n\t\t\t\t/>\n\t\t\t\t<AlgoVizContainer\n\t\t\t\t\tid={3}\n\t\t\t\t\tname={\"bfs-visualisation\"}\n\t\t\t\t\ttitle={\"Breadth First Search\"}\n\t\t\t\t\tselectableAlgorithms={[\"BFS\", \"DFS\"]}\n\t\t\t\t\texampleGraph={\"directedTree\"}\n\t\t\t\t/>\n\t\t\t\t<AlgoVizContainer\n\t\t\t\t\tid={4}\n\t\t\t\t\tname={\"tscc-visualisation\"}\n\t\t\t\t\ttitle={\"Tarjan's Algorithm\"}\n\t\t\t\t\tselectableAlgorithms={[\"TSC\"]}\n\t\t\t\t\texampleGraph={\"disconnectedComponents\"}\n\t\t\t\t/>\n\t\t\t\t<AlgoVizContainer\n\t\t\t\t\tid={5}\n\t\t\t\t\tname={\"bc-visualisation\"}\n\t\t\t\t\ttitle={\"Articulation Point Search\"}\n\t\t\t\t\tselectableAlgorithms={[\"APS\"]}\n\t\t\t\t\tgraphType={\"undirected\"}\n\t\t\t\t\texampleGraph={\"biconnected\"}\n\t\t\t\t/>\n\t\t\t\t<AlgoVizContainer\n\t\t\t\t\tid={6}\n\t\t\t\t\tname={\"bp-visualisation\"}\n\t\t\t\t\ttitle={\"Bipartiteness Algorithm\"}\n\t\t\t\t\tselectableAlgorithms={[\"BA\"]}\n\t\t\t\t\tgraphType={\"undirected\"}\n\t\t\t\t\texampleGraph={\"biconnectedBipartite\"}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from \"react\";\n\nimport skrollr from \"skrollr\";\n\nimport AppContainer from \"./containers/AppContainer\";\n\nimport \"./style/pure.css\";\n// import \"./style/icons.css\";\nimport \"./style/main.css\";\n\n/**\n * We must initialise skrollr AFTER we have rendered our React application\n */\nif (\n\t!/Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(\n\t\tnavigator.userAgent || navigator.vendor || window.opera\n\t)\n) {\n\tskrollr.init({\n\t\tforceHeight: false,\n\t});\n}\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<AppContainer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}